/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return false; // Empty tree, no path exists.
        }

        // If we reach a leaf node and the current targetSum equals the value of the leaf node, return true.
        if (root.left == null && root.right == null && targetSum == root.val) {
            return true;
        }
        // Recursively check the left and right subtrees with updated targetSum.
        boolean leftPath = hasPathSum(root.left, targetSum - root.val);
        boolean rightPath = hasPathSum(root.right, targetSum - root.val);

        // Return true if either the left subtree or the right subtree has a valid path.
        return leftPath || rightPath;
    }
}
